#include <iostream>
using namespace std;

const int MIN_NR = 10, MAX_NR = 99, MIN_LS = 5, MAX_LS = 20;

class DoublyLinkedList {
private:
    struct Node {
        int data;       // Holds the actual value
        Node* prev;     // Pointer to the previous node in the list
        Node* next;     // Pointer to the next node in the list

        // Constructor for a node, optionally with previous and next pointers
        Node(int val, Node* p = nullptr, Node* n = nullptr) : data(val), prev(p), next(n) {}
    };

    Node* head;  // Points to the first node of the list
    Node* tail;  // Points to the last node of the list

public:
    DoublyLinkedList() : head(nullptr), tail(nullptr) {}  // Initializes an empty list

    // Inserts a new node with 'value' after 'position' nodes in the list
    void insert_after(int value, int position) {
        if (position < 0) {
            cout << "Position must be >= 0." << endl;
            return;
        }
        Node* newNode = new Node(value);
        if (!head) {  // If the list is empty, new node becomes both head and tail
            head = tail = newNode;
            return;
        }
        Node* temp = head;
        for (int i = 0; i < position && temp; ++i)  // Navigate to the node after which new node will be inserted
            temp = temp->next;
        if (!temp) {  // If position exceeds list size, do not insert
            cout << "Position exceeds list size. Node not inserted.\n";
            delete newNode;
            return;
        }
        newNode->next = temp->next;  // Link new node with the next node in the list
        newNode->prev = temp;  // Link new node with the previous node
        if (temp->next)
            temp->next->prev = newNode;
        else
            tail = newNode;  // If the new node is inserted at the end, update the tail
        temp->next = newNode;
    }

    
};

int main() {
    cout << MIN_NR + MIN_LS + MAX_NR + MAX_LS; // Output the sum of constants as a dummy operation
    return 0;
}
void every_other_element() {
    Node* current = head;
    bool skip = false;
    while (current != nullptr) {
        if (!skip) {
            cout << current->data << " ";
        }
        skip = !skip;  // Toggle skip on each iteration
        current = current->next;
    }
    cout << endl;
}
int main () {
    DoublyLinkedList list;
    // Adding some elements to the list
    list.push_back(1);
    list.push_back(2);
    list.push_back(3);
    list.push_back(4);
    list.push_back(5);


    // Demonstrating the every_other_element() method
    list.every_other_element();  // Should output: 1 3 5

    return 0;
}
